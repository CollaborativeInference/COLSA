}
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
print(negl)
init = statistics$betahat
sum2 = statistics$Hessian
print(statistics)
sum2 = ifelse(is.na(sum2),diag(0,p,p),sum2)
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
print(negl)
init = statistics$betahat
sum2 = statistics$Hessian
print(sum2)
sum2 = ifelse(is.na(sum2),diag(0,p,p),sum2)
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
print(negl)
init = statistics$betahat
sum2 = statistics$Hessian
print(sum2)
print(is.na(sum2))
sum2 = ifelse(is.na(sum2),diag(0,p,p),sum2)
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
print(negl)
init = statistics$betahat
sum2 = statistics$Hessian
print(sum2)
print(is.na(sum2))
sum2 = ifelse(is.na(sum2),diag(0,p,p),sum2)
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
print(negl)
init = statistics$betahat
sum2 = statistics$Hessian
print(sum2)
print(is.na(sum2))
sum2 = ifelse(is.na(sum2),diag(0,p,p),sum2)
print(diag(0,p,p))
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
is.na(NA)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
print(negl)
init = statistics$betahat
sum2 = statistics$Hessian
print(sum2)
print(is.na(sum2))
print(diag(0,p,p))
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
if(sum(is.na(sum2))>1){sum2<-diag(0,p,p)}
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
is.na(NA)
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
print(negl)
init = statistics$betahat
sum2 = statistics$Hessian
print(sum2)
print(is.na(sum2))
print(diag(0,p,p))
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
if(sum(is.na(sum2))>=1){sum2<-diag(0,p,p)}
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
init = statistics$betahat
sum2 = statistics$Hessian
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
if(sum(is.na(sum2))>=1){sum2<-diag(0,p,p)}
print(sum2)
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
res = updateCOLSA.outloop(subdata,list(betahat=initial_val,Hessian = NA,negl= 0),6+dg+1,6,boundaryknots)
updateCOLSA.outloop <-
function(subdata, statistics, p,npar,boundaryknots){
tol=1e-5;
max_iter=10000;
negl = statistics$negl
init = statistics$betahat
sum2 = statistics$Hessian
if(sum(is.na(init))>1){init<-rep(0,p)}
betahat<-init;
if(sum(is.na(sum2))>=1){sum2<-diag(0,p,p)}
t <- subdata$time
d <- subdata$status
X = as.matrix(subdata[,4:(4+npar-1)])
betahat_old=betahat;
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
U=chol(sum2+H)
L=t(U)
for (r in 1:max_iter){
g_0=-dloglik_eval.hazard(betahat,t,d,X,boundaryknots)
g_1=-t(crossprod((betahat-betahat_old),sum2));
g=g_0+g_1;
d_beta=backsolve(U,forwardsolve(L,g))
df_beta=crossprod(g,d_beta);
if (abs(df_beta)<tol){
break
}else {
betahat=betahat+d_beta;
}
H<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots) #J2
U=chol(sum2+H)
L=t(U)
}
H_new<-ddloglik_eval.hazard(betahat,t,d,X,boundaryknots)
sum2<-sum2+H_new
negl<-negl+density_surv_spline_eval.hazard(betahat,t,d,X,boundaryknots)
sd<-sqrt(diag(solve(sum2)));
pvalue<-2*pnorm(-abs(betahat)/sd)
result<-cbind(betahat=betahat,sd=sd,pvalue=pvalue,negll=negl)#
colnames(result)<-c("Estimates","Std.Errors","p-values","neg-logll")#
if(r == max_iter){
stop("maximum iterations reached")
result<-cbind(betahat=rep(NA,length(betahat)),sd=rep(NA,length(sd)),pvalue=rep(NA,length(pvalue)),negll=rep(NA,length(negl)))#
}
statistics = list(betahat = betahat,Hessian = sum2,negl=negl)
return(list(result=result,statistics = statistics))
}
res_site1 = res$result
summary_stat_site1 = res$statistics
print(summary_stat_site1)
b = 2
load(paste(tempdatadir,"/Simdata/hospital",b,"/Simdata.RData",sep=""))
summary_stat_site2 = updateCOLSA.outloop(subdata,summary_stat_site1,6+dg+1,6,boundaryknots)$statistics
b = 3
load(paste(tempdatadir,"/Simdata/hospital",b,"/Simdata.RData",sep=""))
summary_stat_site3 = updateCOLSA.outloop(subdata,summary_stat_site2,6+dg+1,6,boundaryknots)$statistics
b = 4
load(paste(tempdatadir,"/Simdata/hospital",b,"/Simdata.RData",sep=""))
summary_stat_site4 = updateCOLSA.outloop(subdata,summary_stat_site3,6+dg+1,6,boundaryknots)$statistics
b = 5
load(paste(tempdatadir,"/Simdata/hospital",b,"/Simdata.RData",sep=""))
summary_stat_site5 = updateCOLSA.outloop(subdata,summary_stat_site4,6+dg+1,6,boundaryknots)$statistics
b = 6
load(paste(tempdatadir,"/Simdata/hospital",b,"/Simdata.RData",sep=""))
res6 = updateCOLSA.outloop(subdata,summary_stat_site5,6+dg+1,6,boundaryknots)
print(res6$result)
t_plot = seq(0,max(data$time[data$status==1]),0.001)
lambda =  c(10, 20); gamma =  c(3,5)
true_surv = 0.5*exp(-lambda[1]*t^(gamma[1]))+  (1-0.5)*exp(-lambda[2]*t^(gamma[2]))
lambda =  c(10, 20); gamma =  c(3,5)
true_surv = 0.5*exp(-lambda[1]*t^(gamma[1]))+  (1-0.5)*exp(-lambda[2]*t^(gamma[2]))
gamma[1]
t^(gamma[1])
true_surv = 0.5*exp(-lambda[1]*t_plot^(gamma[1]))+  (1-0.5)*exp(-lambda[2]*t_plot^(gamma[2]))
true_surv
colsa_surv = get_est_surv(res6$result[,1],t_plot,as.matrix(rep(0,6)))
colsa_surv = get_est_surv(res6$result[,1],t_plot,as.matrix(rep(0,6)),Boundary.knots)
colsa_surv = get_est_surv(res6$result[,1],t_plot,as.matrix(rep(0,6)),boundaryknots)
res6$result[,1]
as.matrix(rep(0,6))
colsa_surv = get_est_surv(res6$result[,1],t_plot,as.numeric(rep(0,6)),boundaryknots)
as.numeric(rep(0,6))
t_plot
matrix(0,1,6)
colsa_surv = get_est_surv(res6$result[,1],t_plot,matrix(0,1,6),boundaryknots)
colsa_surv
true_surv = 0.5*exp(-lambda[1]*t_plot^(gamma[1]))+  (1-0.5)*exp(-lambda[2]*t_plot^(gamma[2]))
colsa_surv = get_est_surv(res6$result[,1],t_plot,matrix(0,1,6),boundaryknots)
true_surv_df = data.frame(time =t_plot, surv = true_surv,method = "ground-truth")
colsa_surv_df =  data.frame(time = t_plot, surv = colsa_surv ,method = "COLSA")
ggplot(NULL, aes(time,surv,method)) +
geom_point(data=true_surv_df,aes(color=method),size=0.1)+
geom_point(data=colsa_surv_df,aes(color = method),size=0.1)
library(ggplot2)
ggplot(NULL, aes(time,surv,method)) +
geom_point(data=true_surv_df,aes(color=method),size=0.1)+
geom_point(data=colsa_surv_df,aes(color = method),size=0.1)
knitr::knit(my-vignette.Rmd)
knitr::knit("my-vignette.Rmd")
knitr::knit("my-vignette.Rmd")
pwd
getwd()
getwd( "/Users/humengtong/University of Michigan Dropbox/Mengtong Hu/project2/colsa/R/my-vignette")
knitr::knit( "/Users/humengtong/University of Michigan Dropbox/Mengtong Hu/project2/colsa/R/my-vignette.Rmd")
